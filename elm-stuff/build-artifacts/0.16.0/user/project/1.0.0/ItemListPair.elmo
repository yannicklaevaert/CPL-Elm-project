Elm.ItemListPair = Elm.ItemListPair || {};
Elm.ItemListPair.make = function (_elm) {
   "use strict";
   _elm.ItemListPair = _elm.ItemListPair || {};
   if (_elm.ItemListPair.values) return _elm.ItemListPair.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Item = Elm.Item.make(_elm),
   $ItemList = Elm.ItemList.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var ToggleDone = {ctor: "ToggleDone"};
   var TogglePin = {ctor: "TogglePin"};
   var ToggleVisibilityDone = {ctor: "ToggleVisibilityDone"};
   var SelectPrevious = {ctor: "SelectPrevious"};
   var SelectNext = {ctor: "SelectNext"};
   var DoneList = function (a) {
      return {ctor: "DoneList",_0: a};
   };
   var TodoList = function (a) {
      return {ctor: "TodoList",_0: a};
   };
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.div,
              _U.list([]),
              _U.list([_U.eq($List.length(model.todoList.items),
                      0) ? A2($Html.p,_U.list([]),_U.list([])) : A2($Html.h1,
                      _U.list([]),
                      _U.list([$Html.text("To do")]))
                      ,A2($ItemList.view,
                      A2($Signal.forwardTo,address,TodoList),
                      model.todoList)]))
              ,A2($Html.div,
              _U.list([]),
              _U.list([$Basics.not(model.visibilityDone) ? A2($Html.p,
              _U.list([]),
              _U.list([])) : A2($Html.div,
              _U.list([]),
              _U.list([A2($Html.h1,_U.list([]),_U.list([$Html.text("Done")]))
                      ,A2($Html.div,
                      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                               ,_0: "opacity"
                                                               ,_1: "0.5"}]))]),
                      _U.list([A2($ItemList.view,
                      A2($Signal.forwardTo,address,DoneList),
                      model.doneList)]))]))]))]));
   });
   var getItem = F2(function (n,model) {
      return _U.cmp(n,
      $List.length(model.todoList.items)) < 0 ? A2($ItemList.getItem,
      n,
      model.todoList) : A2($ItemList.getItem,
      n - $List.length(model.todoList.items),
      model.doneList);
   });
   var getPreviousSelected = function (model) {
      var totalLength = $List.length(model.todoList.items) + $List.length(model.doneList.items);
      return _U.eq(A2($Basics._op["%"],model.selected,totalLength),
      0) ? totalLength - 1 : A2($Basics._op["%"],
      model.selected - 1,
      totalLength);
   };
   var getNextSelected = function (model) {
      var totalLength = $List.length(model.todoList.items) + $List.length(model.doneList.items);
      return A2($Basics._op["%"],model.selected + 1,totalLength);
   };
   var getNextItem = function (model) {
      var totalLength = $List.length(model.todoList.items) + $List.length(model.doneList.items);
      return _U.cmp(A2($Basics._op["%"],
      model.selected + 1,
      totalLength),
      $List.length(model.todoList.items)) > -1 ? A2($ItemList.getItem,
      model.selected + 1 - $List.length(model.todoList.items),
      model.doneList) : A2($ItemList.getItem,
      A2($Basics._op["%"],model.selected + 1,totalLength),
      model.todoList);
   };
   var getNextItemList = function (model) {
      var totalLength = $List.length(model.todoList.items) + $List.length(model.doneList.items);
      return _U.cmp(A2($Basics._op["%"],
      model.selected + 1,
      totalLength),
      $List.length(model.todoList.items)) > -1 ? false : true;
   };
   var getPreviousItem = function (model) {
      var totalLength = $List.length(model.todoList.items) + $List.length(model.doneList.items);
      return _U.eq(A2($Basics._op["%"],model.selected,totalLength),
      0) ? _U.eq($List.length(model.doneList.items),
      0) ? A2($ItemList.getItem,
      totalLength - 1,
      model.todoList) : A2($ItemList.getItem,
      totalLength - 1 - $List.length(model.todoList.items),
      model.doneList) : _U.cmp(A2($Basics._op["%"],
      model.selected - 1,
      totalLength),
      $List.length(model.todoList.items)) < 0 ? A2($ItemList.getItem,
      model.selected - 1,
      model.todoList) : A2($ItemList.getItem,
      model.selected - 1 - $List.length(model.todoList.items),
      model.doneList);
   };
   var getPreviousItemList = function (model) {
      var totalLength = $List.length(model.todoList.items) + $List.length(model.doneList.items);
      return _U.eq(A2($Basics._op["%"],model.selected,totalLength),
      0) ? _U.eq($List.length(model.doneList.items),
      0) ? true : false : _U.cmp(A2($Basics._op["%"],
      model.selected - 1,
      totalLength),
      $List.length(model.todoList.items)) < 0 ? true : false;
   };
   var getSelectedItem = function (model) {
      return _U.cmp(model.selected,
      $List.length(model.todoList.items)) > -1 ? A2($ItemList.getItem,
      model.selected - $List.length(model.todoList.items),
      model.doneList) : A2($ItemList.getItem,
      model.selected,
      model.todoList);
   };
   var getSelectedItemList = function (model) {
      return _U.cmp(model.selected,
      $List.length(model.todoList.items)) > -1 ? false : true;
   };
   var findItemWithId = F2(function (id,list) {
      findItemWithId: while (true) {
         var _p0 = list;
         if (_p0.ctor === "::") {
               if (_U.eq(_p0._0._0,id)) return _p0._0._1; else {
                     var _v1 = id,_v2 = _p0._1;
                     id = _v1;
                     list = _v2;
                     continue findItemWithId;
                  }
            } else {
               return $Item.dummyItem;
            }
      }
   });
   var update = F2(function (action,model) {
      update: while (true) {
         var _p1 = action;
         switch (_p1.ctor)
         {case "TodoList": var _p8 = _p1._0;
              var _p2 = _p8;
              switch (_p2.ctor)
              {case "SubAction": var _p6 = _p2._0;
                   var _p3 = _p2._1;
                   switch (_p3.ctor)
                   {case "TogglePin": return _U.update(model,
                        {todoList: function () {
                           var changedTodoList = A2($ItemList.update,
                           _p8,
                           model.todoList);
                           var updatedTodoList = A2($ItemList.update,
                           $ItemList.SortNewWithPin,
                           changedTodoList);
                           var _p4 = A2($ItemList.getItem,model.selected,updatedTodoList);
                           var newSelectedId = _p4._0;
                           var adaptedTodoList = A2($ItemList.update,
                           A2($ItemList.SubAction,_p6,$Item.ToggleSelect),
                           updatedTodoList);
                           return A2($ItemList.update,
                           A2($ItemList.SubAction,newSelectedId,$Item.ToggleSelect),
                           adaptedTodoList);
                        }()});
                      case "ToggleDone": var updatedPair = _U.update(model,
                        {doneList: function () {
                           var updatedTodoList = A2($ItemList.update,
                           _p8,
                           model.todoList);
                           return A2($ItemList.update,
                           A2($ItemList.AddItem,
                           _p6,
                           A2(findItemWithId,_p6,updatedTodoList.items)),
                           model.doneList);
                        }()
                        ,todoList: A2($ItemList.update,
                        $ItemList.Remove(_p6),
                        model.todoList)
                        ,visibilityDone: $List.isEmpty(model.doneList.items) ? true : model.visibilityDone});
                        var previousSelected = getPreviousSelected(updatedPair);
                        var updatedNewPair = A2(update,
                        DoneList(A2($ItemList.SubAction,_p6,$Item.ToggleSelect)),
                        updatedPair);
                        var _p5 = A2(getItem,previousSelected,updatedNewPair);
                        var newSelectedId = _p5._0;
                        var adaptedPair = _U.cmp(previousSelected,
                        $List.length(updatedNewPair.todoList.items)) < 0 ? A2(update,
                        TodoList(A2($ItemList.SubAction,
                        newSelectedId,
                        $Item.ToggleSelect)),
                        updatedNewPair) : A2(update,
                        DoneList(A2($ItemList.SubAction,
                        newSelectedId,
                        $Item.ToggleSelect)),
                        updatedNewPair);
                        return _U.update(model,
                        {todoList: adaptedPair.todoList
                        ,doneList: adaptedPair.doneList
                        ,selected: previousSelected
                        ,visibilityDone: adaptedPair.visibilityDone});
                      default: return _U.update(model,
                        {todoList: A2($ItemList.update,_p8,model.todoList)});}
                 case "AddNew": return _U.update(model,
                   {todoList: function () {
                      var changedTodoList = A2($ItemList.update,
                      A2($ItemList.SubAction,model.selected,$Item.ToggleSelect),
                      model.todoList);
                      var updatedTodoList = A2($ItemList.update,_p8,changedTodoList);
                      var adaptedTodoList = A2($ItemList.update,
                      $ItemList.SortNewWithPin,
                      updatedTodoList);
                      var _p7 = A2($ItemList.getItem,model.selected,adaptedTodoList);
                      var newSelectedId = _p7._0;
                      return A2($ItemList.update,
                      A2($ItemList.SubAction,newSelectedId,$Item.ToggleSelect),
                      adaptedTodoList);
                   }()});
                 default: return _U.update(model,
                   {todoList: A2($ItemList.update,_p8,model.todoList)});}
            case "DoneList": var _p14 = _p1._0;
              var _p9 = _p14;
              if (_p9.ctor === "SubAction") {
                    var _p13 = _p9._0;
                    var _p10 = _p9._1;
                    switch (_p10.ctor)
                    {case "TogglePin": return _U.update(model,
                         {doneList: function () {
                            var changedDoneList = A2($ItemList.update,
                            _p14,
                            model.todoList);
                            var updatedDoneList = A2($ItemList.update,
                            $ItemList.SortNewWithPin,
                            changedDoneList);
                            var _p11 = A2($ItemList.getItem,model.selected,updatedDoneList);
                            var newSelectedId = _p11._0;
                            var adaptedDoneList = A2($ItemList.update,
                            A2($ItemList.SubAction,_p13,$Item.ToggleSelect),
                            updatedDoneList);
                            return A2($ItemList.update,
                            A2($ItemList.SubAction,newSelectedId,$Item.ToggleSelect),
                            adaptedDoneList);
                         }()});
                       case "ToggleDone": var updatedPair = _U.update(model,
                         {todoList: function () {
                            var updatedDoneList = A2($ItemList.update,
                            _p14,
                            model.doneList);
                            return A2($ItemList.update,
                            A2($ItemList.AddItem,
                            _p13,
                            A2(findItemWithId,_p13,updatedDoneList.items)),
                            model.todoList);
                         }()
                         ,doneList: A2($ItemList.update,
                         $ItemList.Remove(_p13),
                         model.doneList)
                         ,visibilityDone: _U.eq($List.length(model.doneList.items),
                         1) ? false : model.visibilityDone});
                         var nextSelected = getNextSelected(updatedPair);
                         var updatedNewPair = A2(update,
                         TodoList(A2($ItemList.SubAction,_p13,$Item.ToggleSelect)),
                         updatedPair);
                         var _p12 = A2(getItem,nextSelected,updatedNewPair);
                         var newSelectedId = _p12._0;
                         var adaptedPair = _U.cmp(nextSelected,
                         $List.length(updatedNewPair.todoList.items)) < 0 ? A2(update,
                         TodoList(A2($ItemList.SubAction,
                         newSelectedId,
                         $Item.ToggleSelect)),
                         updatedNewPair) : A2(update,
                         DoneList(A2($ItemList.SubAction,
                         newSelectedId,
                         $Item.ToggleSelect)),
                         updatedNewPair);
                         return _U.update(model,
                         {todoList: adaptedPair.todoList
                         ,doneList: adaptedPair.doneList
                         ,selected: nextSelected
                         ,visibilityDone: adaptedPair.visibilityDone});
                       default: return _U.update(model,
                         {doneList: A2($ItemList.update,_p14,model.doneList)});}
                 } else {
                    return _U.update(model,
                    {doneList: A2($ItemList.update,_p14,model.doneList)});
                 }
            case "SelectNext": return _U.update(model,
              {todoList: function () {
                 var _p15 = getSelectedItem(model);
                 var currentId = _p15._0;
                 var _p16 = getNextItem(model);
                 var nextId = _p16._0;
                 var updatedTodoList = getSelectedItemList(model) ? A2($ItemList.update,
                 A2($ItemList.SubAction,currentId,$Item.ToggleSelect),
                 model.todoList) : model.todoList;
                 return getNextItemList(model) ? A2($ItemList.update,
                 A2($ItemList.SubAction,nextId,$Item.ToggleSelect),
                 updatedTodoList) : updatedTodoList;
              }()
              ,doneList: function () {
                 var _p17 = getSelectedItem(model);
                 var currentId = _p17._0;
                 var _p18 = getNextItem(model);
                 var nextId = _p18._0;
                 var updatedDoneList = getSelectedItemList(model) ? model.doneList : A2($ItemList.update,
                 A2($ItemList.SubAction,currentId,$Item.ToggleSelect),
                 model.doneList);
                 return getNextItemList(model) ? updatedDoneList : A2($ItemList.update,
                 A2($ItemList.SubAction,nextId,$Item.ToggleSelect),
                 updatedDoneList);
              }()
              ,selected: function () {
                 var totalLength = $List.length(model.todoList.items) + $List.length(model.doneList.items);
                 return A2($Basics._op["%"],model.selected + 1,totalLength);
              }()});
            case "SelectPrevious": return _U.update(model,
              {todoList: function () {
                 var _p19 = getSelectedItem(model);
                 var currentId = _p19._0;
                 var _p20 = getPreviousItem(model);
                 var previousId = _p20._0;
                 var updatedTodoList = getSelectedItemList(model) ? A2($ItemList.update,
                 A2($ItemList.SubAction,currentId,$Item.ToggleSelect),
                 model.todoList) : model.todoList;
                 return getPreviousItemList(model) ? A2($ItemList.update,
                 A2($ItemList.SubAction,previousId,$Item.ToggleSelect),
                 updatedTodoList) : updatedTodoList;
              }()
              ,doneList: function () {
                 var _p21 = getSelectedItem(model);
                 var currentId = _p21._0;
                 var _p22 = getPreviousItem(model);
                 var previousId = _p22._0;
                 var updatedDoneList = getSelectedItemList(model) ? model.doneList : A2($ItemList.update,
                 A2($ItemList.SubAction,currentId,$Item.ToggleSelect),
                 model.doneList);
                 return getPreviousItemList(model) ? updatedDoneList : A2($ItemList.update,
                 A2($ItemList.SubAction,previousId,$Item.ToggleSelect),
                 updatedDoneList);
              }()
              ,selected: function () {
                 var totalLength = $List.length(model.todoList.items) + $List.length(model.doneList.items);
                 return _U.eq(A2($Basics._op["%"],model.selected,totalLength),
                 0) ? totalLength - 1 : A2($Basics._op["%"],
                 model.selected - 1,
                 totalLength);
              }()});
            case "ToggleVisibilityDone": return _U.update(model,
              {visibilityDone: $Basics.not(model.visibilityDone)});
            case "TogglePin": var _p23 = getSelectedItem(model);
              var currentId = _p23._0;
              if (getSelectedItemList(model)) {
                    var _v8 = TodoList(A2($ItemList.SubAction,
                    currentId,
                    $Item.TogglePin)),
                    _v9 = model;
                    action = _v8;
                    model = _v9;
                    continue update;
                 } else {
                    var _v10 = DoneList(A2($ItemList.SubAction,
                    currentId,
                    $Item.TogglePin)),
                    _v11 = model;
                    action = _v10;
                    model = _v11;
                    continue update;
                 }
            default: var _p24 = getSelectedItem(model);
              var currentId = _p24._0;
              if (getSelectedItemList(model)) {
                    var _v12 = TodoList(A2($ItemList.SubAction,
                    currentId,
                    $Item.ToggleDone)),
                    _v13 = model;
                    action = _v12;
                    model = _v13;
                    continue update;
                 } else {
                    var _v14 = DoneList(A2($ItemList.SubAction,
                    currentId,
                    $Item.ToggleDone)),
                    _v15 = model;
                    action = _v14;
                    model = _v15;
                    continue update;
                 }}
      }
   });
   var init = {todoList: function () {
                 var initTodoList = $ItemList.init;
                 return A2($ItemList.update,
                 A2($ItemList.SubAction,0,$Item.ToggleSelect),
                 initTodoList);
              }()
              ,doneList: $ItemList.initEmpty
              ,selected: 0
              ,visibilityDone: false};
   var Model = F4(function (a,b,c,d) {
      return {todoList: a
             ,doneList: b
             ,selected: c
             ,visibilityDone: d};
   });
   return _elm.ItemListPair.values = {_op: _op
                                     ,Model: Model
                                     ,init: init
                                     ,findItemWithId: findItemWithId
                                     ,getSelectedItemList: getSelectedItemList
                                     ,getSelectedItem: getSelectedItem
                                     ,getPreviousItemList: getPreviousItemList
                                     ,getPreviousItem: getPreviousItem
                                     ,getNextItemList: getNextItemList
                                     ,getNextItem: getNextItem
                                     ,getNextSelected: getNextSelected
                                     ,getPreviousSelected: getPreviousSelected
                                     ,getItem: getItem
                                     ,TodoList: TodoList
                                     ,DoneList: DoneList
                                     ,SelectNext: SelectNext
                                     ,SelectPrevious: SelectPrevious
                                     ,ToggleVisibilityDone: ToggleVisibilityDone
                                     ,TogglePin: TogglePin
                                     ,ToggleDone: ToggleDone
                                     ,update: update
                                     ,view: view};
};