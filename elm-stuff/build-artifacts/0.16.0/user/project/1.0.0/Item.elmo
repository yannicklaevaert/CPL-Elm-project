Elm.Item = Elm.Item || {};
Elm.Item.make = function (_elm) {
   "use strict";
   _elm.Item = _elm.Item || {};
   if (_elm.Item.values) return _elm.Item.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Static = Elm.Static.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "TogglePin": return _U.update(model,
           {pinned: model.pinned ? false : true});
         case "ToggleDone": return _U.update(model,
           {done: model.done ? false : true});
         case "ToggleTruncate": return _U.update(model,
           {truncated: model.truncated ? false : true});
         default: return _U.update(model,
           {selected: model.selected ? false : true});}
   });
   var ToggleSelect = {ctor: "ToggleSelect"};
   var ToggleTruncate = {ctor: "ToggleTruncate"};
   var ToggleDone = {ctor: "ToggleDone"};
   var TogglePin = {ctor: "TogglePin"};
   var view = F2(function (address,model) {
      var _p1 = model.itemType;
      if (_p1.ctor === "ReminderItem") {
            var _p2 = _p1._0;
            return A2($Html.div,
            _U.list([model.selected ? $Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                                      ,_0: "border-left-style"
                                                                      ,_1: "double"}
                                                                     ,{ctor: "_Tuple2",_0: "border-left-width",_1: "thick"}
                                                                     ,{ctor: "_Tuple2"
                                                                      ,_0: "border-left-color"
                                                                      ,_1: "rgb(255, 165, 0)"}])) : $Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                                                                                                    ,_0: "border-left-style"
                                                                                                                                    ,_1: "solid"}
                                                                                                                                   ,{ctor: "_Tuple2"
                                                                                                                                    ,_0: "border-left-width"
                                                                                                                                    ,_1: "0px"}]))]),
            _U.list([A2($Html.p,_U.list([]),_U.list([$Html.text(_p2.body)]))
                    ,A2($Html.p,
                    _U.list([]),
                    _U.list([_U.eq(model.done,false) ? A2($Html.button,
                            _U.list([A2($Html$Events.onClick,address,ToggleDone)]),
                            _U.list([$Html.text("Mark as Done")])) : A2($Html.button,
                            _U.list([A2($Html$Events.onClick,address,ToggleDone)]),
                            _U.list([$Html.text("Undo")]))
                            ,_U.eq(model.pinned,false) ? A2($Html.button,
                            _U.list([A2($Html$Events.onClick,address,TogglePin)]),
                            _U.list([$Html.text("Pin")])) : A2($Html.button,
                            _U.list([A2($Html$Events.onClick,address,TogglePin)]),
                            _U.list([$Html.text("Unpin")]))]))
                    ,A2($Html.p,
                    _U.list([]),
                    _U.list([$Html.text(A2($Basics._op["++"],
                    "date: ",
                    _p2.created))]))]));
         } else {
            var _p4 = _p1._0;
            return A2($Html.div,
            _U.list([model.selected ? $Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                                      ,_0: "border-left-style"
                                                                      ,_1: "double"}
                                                                     ,{ctor: "_Tuple2",_0: "border-left-width",_1: "thick"}
                                                                     ,{ctor: "_Tuple2"
                                                                      ,_0: "border-left-color"
                                                                      ,_1: "rgb(255, 165, 0)"}])) : $Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                                                                                                    ,_0: "border-left-style"
                                                                                                                                    ,_1: "solid"}
                                                                                                                                   ,{ctor: "_Tuple2"
                                                                                                                                    ,_0: "border-left-width"
                                                                                                                                    ,_1: "0px"}]))]),
            _U.list([A2($Html.p,
                    _U.list([]),
                    _U.list([$Html.text(A2($Basics._op["++"],
                    _p4.title,
                    A2($Basics._op["++"],
                    " | ",
                    A2($Basics._op["++"],_p4.from," says:"))))]))
                    ,function () {
                       var body = function () {
                          var _p3 = model.truncated;
                          if (_p3 === false) {
                                return _p4.body;
                             } else {
                                return _U.cmp($String.length(_p4.body),
                                200) > -1 ? A2($String.append,
                                $String.fromList(A2($List.take,200,$String.toList(_p4.body))),
                                "...") : _p4.body;
                             }
                       }();
                       return A2($Html.p,_U.list([]),_U.list([$Html.text(body)]));
                    }()
                    ,A2($Html.p,
                    _U.list([]),
                    _U.list([_U.cmp($String.length(_p4.body),
                            200) > -1 ? _U.eq(model.truncated,false) ? A2($Html.button,
                            _U.list([A2($Html$Events.onClick,address,ToggleTruncate)]),
                            _U.list([$Html.text("Less")])) : A2($Html.button,
                            _U.list([A2($Html$Events.onClick,address,ToggleTruncate)]),
                            _U.list([$Html.text("More")])) : A2($Html.p,
                            _U.list([]),
                            _U.list([]))
                            ,_U.eq(model.done,false) ? A2($Html.button,
                            _U.list([A2($Html$Events.onClick,address,ToggleDone)]),
                            _U.list([$Html.text("Mark as Done")])) : A2($Html.button,
                            _U.list([A2($Html$Events.onClick,address,ToggleDone)]),
                            _U.list([$Html.text("Undo")]))
                            ,_U.eq(model.pinned,false) ? A2($Html.button,
                            _U.list([A2($Html$Events.onClick,address,TogglePin)]),
                            _U.list([$Html.text("Pin")])) : A2($Html.button,
                            _U.list([A2($Html$Events.onClick,address,TogglePin)]),
                            _U.list([$Html.text("Unpin")]))]))
                    ,A2($Html.p,
                    _U.list([]),
                    _U.list([$Html.text(A2($Basics._op["++"],
                    "date: ",
                    _p4.date))]))]));
         }
   });
   var Model = F5(function (a,b,c,d,e) {
      return {itemType: a
             ,pinned: b
             ,done: c
             ,truncated: d
             ,selected: e};
   });
   var EmailItem = function (a) {
      return {ctor: "EmailItem",_0: a};
   };
   var ReminderItem = function (a) {
      return {ctor: "ReminderItem",_0: a};
   };
   var newItem = function (itemType) {
      var _p5 = itemType;
      if (_p5.ctor === "ReminderItem") {
            return {itemType: ReminderItem(_p5._0)
                   ,pinned: false
                   ,done: false
                   ,truncated: false
                   ,selected: false};
         } else {
            return {itemType: EmailItem(_p5._0)
                   ,pinned: false
                   ,done: false
                   ,truncated: true
                   ,selected: false};
         }
   };
   var newReminder = F2(function (reminderBody,reminderDate) {
      return newItem(ReminderItem({body: reminderBody
                                  ,created: reminderDate}));
   });
   var dummyItem = A2(newReminder,"dummyReminder","2000-01-01");
   return _elm.Item.values = {_op: _op
                             ,ReminderItem: ReminderItem
                             ,EmailItem: EmailItem
                             ,Model: Model
                             ,dummyItem: dummyItem
                             ,newItem: newItem
                             ,newReminder: newReminder
                             ,TogglePin: TogglePin
                             ,ToggleDone: ToggleDone
                             ,ToggleTruncate: ToggleTruncate
                             ,ToggleSelect: ToggleSelect
                             ,update: update
                             ,view: view};
};