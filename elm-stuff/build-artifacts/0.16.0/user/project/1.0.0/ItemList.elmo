Elm.ItemList = Elm.ItemList || {};
Elm.ItemList.make = function (_elm) {
   "use strict";
   _elm.ItemList = _elm.ItemList || {};
   if (_elm.ItemList.values) return _elm.ItemList.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Item = Elm.Item.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Static = Elm.Static.make(_elm);
   var _op = {};
   var DoubleSubAction = F4(function (a,b,c,d) {
      return {ctor: "DoubleSubAction",_0: a,_1: b,_2: c,_3: d};
   });
   var SortNewWithPin = {ctor: "SortNewWithPin"};
   var SortOldWithoutPin = {ctor: "SortOldWithoutPin"};
   var Remove = function (a) {    return {ctor: "Remove",_0: a};};
   var AddItem = F2(function (a,b) {
      return {ctor: "AddItem",_0: a,_1: b};
   });
   var AddNew = function (a) {    return {ctor: "AddNew",_0: a};};
   var SubAction = F2(function (a,b) {
      return {ctor: "SubAction",_0: a,_1: b};
   });
   var view = F2(function (address,model) {
      var view$ = function (_p0) {
         var _p1 = _p0;
         return A2($Item.view,
         A2($Signal.forwardTo,address,SubAction(_p1._0)),
         _p1._1);
      };
      var items = A2($List.map,view$,model.items);
      return A2($Html.div,_U.list([]),items);
   });
   var updateItem = F3(function (f,id,model) {
      var test = function (_p2) {
         var _p3 = _p2;
         var _p5 = _p3._1;
         var _p4 = _p3._0;
         return {ctor: "_Tuple2"
                ,_0: _p4
                ,_1: _U.eq(id,_p4) ? f(_p5) : _p5};
      };
      return _U.update(model,{items: A2($List.map,test,model.items)});
   });
   var removeItem = F2(function (id,model) {
      return _U.update(model,
      {items: A2($List.filter,
      function (i) {
         return !_U.eq($Basics.fst(i),id);
      },
      model.items)});
   });
   var getItem = F2(function (n,model) {
      var item = $List.head(A2($List.drop,n,model.items));
      var _p6 = item;
      if (_p6.ctor === "Just") {
            return _p6._0;
         } else {
            return {ctor: "_Tuple2",_0: 987654321,_1: $Item.dummyItem};
         }
   });
   var placeIdItem = F3(function (_p7,list,newToOld) {
      var _p8 = _p7;
      var _p16 = _p8._1;
      var _p15 = _p8._0;
      var _p9 = list;
      if (_p9.ctor === "[]") {
            return _U.list([{ctor: "_Tuple2",_0: _p15,_1: _p16}]);
         } else {
            var _p14 = _p9._0._1;
            var _p13 = _p9._0._0;
            var _p12 = _p9._1;
            var itemType = _p16.itemType;
            var xItemType = _p14.itemType;
            var xDate = function () {
               var _p10 = xItemType;
               if (_p10.ctor === "ReminderItem") {
                     return _p10._0.created;
                  } else {
                     return _p10._0.date;
                  }
            }();
            var date = function () {
               var _p11 = itemType;
               if (_p11.ctor === "ReminderItem") {
                     return _p11._0.created;
                  } else {
                     return _p11._0.date;
                  }
            }();
            return newToOld ? _U.cmp(date,xDate) < 0 ? A2($List._op["::"],
            {ctor: "_Tuple2",_0: _p15,_1: _p16},
            list) : A2($List._op["::"],
            {ctor: "_Tuple2",_0: _p13,_1: _p14},
            A3(placeIdItem,
            {ctor: "_Tuple2",_0: _p15,_1: _p16},
            _p12,
            newToOld)) : _U.cmp(date,xDate) > 0 ? A2($List._op["::"],
            {ctor: "_Tuple2",_0: _p15,_1: _p16},
            list) : A2($List._op["::"],
            {ctor: "_Tuple2",_0: _p13,_1: _p14},
            A3(placeIdItem,
            {ctor: "_Tuple2",_0: _p15,_1: _p16},
            _p12,
            newToOld));
         }
   });
   var sortIdItems = F3(function (unsorted,acc,newToOld) {
      sortIdItems: while (true) {
         var _p17 = unsorted;
         if (_p17.ctor === "[]") {
               return acc;
            } else {
               var newAcc = A3(placeIdItem,
               {ctor: "_Tuple2",_0: _p17._0._0,_1: _p17._0._1},
               acc,
               newToOld);
               var _v8 = _p17._1,_v9 = newAcc,_v10 = newToOld;
               unsorted = _v8;
               acc = _v9;
               newToOld = _v10;
               continue sortIdItems;
            }
      }
   });
   var sortPinnedHelp = F3(function (unsorted,
   pinnedList,
   unpinnedList) {
      sortPinnedHelp: while (true) {
         var _p18 = unsorted;
         if (_p18.ctor === "[]") {
               return A2($Basics._op["++"],
               A3(sortIdItems,pinnedList,_U.list([]),true),
               A3(sortIdItems,unpinnedList,_U.list([]),true));
            } else {
               var _p21 = _p18._1;
               var _p20 = _p18._0._1;
               var _p19 = _p18._0._0;
               if (_p20.pinned) {
                     var _v12 = _p21,
                     _v13 = A2($List._op["::"],
                     {ctor: "_Tuple2",_0: _p19,_1: _p20},
                     pinnedList),
                     _v14 = unpinnedList;
                     unsorted = _v12;
                     pinnedList = _v13;
                     unpinnedList = _v14;
                     continue sortPinnedHelp;
                  } else {
                     var _v15 = _p21,
                     _v16 = pinnedList,
                     _v17 = A2($List._op["::"],
                     {ctor: "_Tuple2",_0: _p19,_1: _p20},
                     unpinnedList);
                     unsorted = _v15;
                     pinnedList = _v16;
                     unpinnedList = _v17;
                     continue sortPinnedHelp;
                  }
            }
      }
   });
   var sortOldWithoutPin = function (model) {
      return _U.update(model,
      {items: A3(sortIdItems,model.items,_U.list([]),false)});
   };
   var sortNewWithPin = function (model) {
      return _U.update(model,
      {items: function () {
         var unsorted = model.items;
         return A3(sortPinnedHelp,unsorted,_U.list([]),_U.list([]));
      }()});
   };
   var addNewItem = F2(function (item,model) {
      var newId = model.nextItemId;
      var newModel = {items: A2($List._op["::"],
                     {ctor: "_Tuple2",_0: newId,_1: item},
                     model.items)
                     ,nextItemId: newId + 1};
      return sortNewWithPin(newModel);
   });
   var addItem = F3(function (id,item,model) {
      var newModel = {items: A2($List._op["::"],
                     {ctor: "_Tuple2",_0: id,_1: item},
                     model.items)
                     ,nextItemId: model.nextItemId};
      return sortNewWithPin(newModel);
   });
   var update = F2(function (action,model) {
      var _p22 = action;
      switch (_p22.ctor)
      {case "AddNew": return A2(addNewItem,_p22._0,model);
         case "AddItem": return A3(addItem,_p22._0,_p22._1,model);
         case "Remove": return A2(removeItem,_p22._0,model);
         case "SubAction": return A3(updateItem,
           $Item.update(_p22._1),
           _p22._0,
           model);
         case "SortOldWithoutPin": return sortOldWithoutPin(model);
         case "SortNewWithPin": return sortNewWithPin(model);
         default: var updatedModel = A3(updateItem,
           $Item.update(_p22._1),
           _p22._0,
           model);
           return A3(updateItem,
           $Item.update(_p22._3),
           _p22._2,
           updatedModel);}
   });
   var sortItems = function (unsorted) {
      var sorter = function (item) {
         var _p23 = item.itemType;
         if (_p23.ctor === "ReminderItem") {
               return _p23._0.created;
            } else {
               return _p23._0.date;
            }
      };
      return A2($List.sortBy,sorter,unsorted);
   };
   var startItems = function () {
      var emails = A2($List.map,$Item.EmailItem,$Static.emails);
      var reminders = A2($List.map,
      $Item.ReminderItem,
      $Static.reminders);
      return sortItems(A2($List.map,
      $Item.newItem,
      A2($List.append,reminders,emails)));
   }();
   var addMultipleItems = F2(function (items,model) {
      addMultipleItems: while (true) {
         var _p24 = items;
         if (_p24.ctor === "[]") {
               return model;
            } else {
               var newModel = A2(addNewItem,_p24._0,model);
               var _v21 = _p24._1,_v22 = newModel;
               items = _v21;
               model = _v22;
               continue addMultipleItems;
            }
      }
   });
   var initEmpty = {items: _U.list([]),nextItemId: 0};
   var Model = F2(function (a,b) {
      return {items: a,nextItemId: b};
   });
   var init = A2(addMultipleItems,
   startItems,
   A2(Model,_U.list([]),0));
   return _elm.ItemList.values = {_op: _op
                                 ,Model: Model
                                 ,initEmpty: initEmpty
                                 ,init: init
                                 ,addMultipleItems: addMultipleItems
                                 ,startItems: startItems
                                 ,sortItems: sortItems
                                 ,sortNewWithPin: sortNewWithPin
                                 ,sortOldWithoutPin: sortOldWithoutPin
                                 ,sortPinnedHelp: sortPinnedHelp
                                 ,sortIdItems: sortIdItems
                                 ,placeIdItem: placeIdItem
                                 ,getItem: getItem
                                 ,addNewItem: addNewItem
                                 ,addItem: addItem
                                 ,removeItem: removeItem
                                 ,updateItem: updateItem
                                 ,SubAction: SubAction
                                 ,AddNew: AddNew
                                 ,AddItem: AddItem
                                 ,Remove: Remove
                                 ,SortOldWithoutPin: SortOldWithoutPin
                                 ,SortNewWithPin: SortNewWithPin
                                 ,DoubleSubAction: DoubleSubAction
                                 ,update: update
                                 ,view: view};
};