Elm.ItemList = Elm.ItemList || {};
Elm.ItemList.make = function (_elm) {
   "use strict";
   _elm.ItemList = _elm.ItemList || {};
   if (_elm.ItemList.values) return _elm.ItemList.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Item = Elm.Item.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Static = Elm.Static.make(_elm);
   var _op = {};
   var Add = function (a) {    return {ctor: "Add",_0: a};};
   var SubAction = F2(function (a,b) {
      return {ctor: "SubAction",_0: a,_1: b};
   });
   var view = F2(function (address,model) {
      var view$ = function (_p0) {
         var _p1 = _p0;
         return A2($Item.view,
         A2($Signal.forwardTo,address,SubAction(_p1._0)),
         _p1._1);
      };
      var items = A2($List.map,view$,model.state);
      return A2($Html.div,_U.list([]),items);
   });
   var updateItem = F3(function (f,id,model) {
      var test = function (_p2) {
         var _p3 = _p2;
         var _p5 = _p3._1;
         var _p4 = _p3._0;
         return {ctor: "_Tuple2"
                ,_0: _p4
                ,_1: _U.eq(id,_p4) ? f(_p5) : _p5};
      };
      return _U.update(model,{state: A2($List.map,test,model.state)});
   });
   var sortItems = function (unsorted) {
      var sorter = function (item) {
         var _p6 = item.content;
         if (_p6.ctor === "ReminderItem") {
               return _p6._0.created;
            } else {
               return _p6._0.date;
            }
      };
      return A2($List.sortBy,sorter,unsorted);
   };
   var startItems = function () {
      var emails = A2($List.map,$Item.EmailItem,$Static.emails);
      var reminders = A2($List.map,
      $Item.ReminderItem,
      $Static.reminders);
      return sortItems(A2($List.map,
      $Item.init,
      A2($List.append,reminders,emails)));
   }();
   var Model = F2(function (a,b) {
      return {state: a,nextItemId: b};
   });
   var initEmpty = A2(Model,_U.list([]),0);
   var initialise = F2(function (model,noIdList) {
      initialise: while (true) {
         var temp = $List.head(noIdList);
         var _p7 = temp;
         if (_p7.ctor === "Nothing") {
               return model;
            } else {
               var justList = $List.tail(noIdList);
               var newModel = A2(Model,
               A2($List.append,
               model.state,
               _U.list([{ctor: "_Tuple2",_0: model.nextItemId,_1: _p7._0}])),
               model.nextItemId + 1);
               var _p8 = justList;
               if (_p8.ctor === "Nothing") {
                     return newModel;
                  } else {
                     var _v5 = newModel,_v6 = _p8._0;
                     model = _v5;
                     noIdList = _v6;
                     continue initialise;
                  }
            }
      }
   });
   var init = A2(initialise,A2(Model,_U.list([]),0),startItems);
   var addItem = F2(function (item,model) {
      var items = A2($List._op["::"],
      item,
      A2($List.map,$Basics.snd,model.state));
      return A2(initialise,A2(Model,_U.list([]),0),sortItems(items));
   });
   var update = F2(function (action,model) {
      var _p9 = action;
      if (_p9.ctor === "Add") {
            return A2(addItem,_p9._0,model);
         } else {
            return A3(updateItem,$Item.update(_p9._1),_p9._0,model);
         }
   });
   return _elm.ItemList.values = {_op: _op
                                 ,Model: Model
                                 ,init: init
                                 ,initEmpty: initEmpty
                                 ,startItems: startItems
                                 ,initialise: initialise
                                 ,sortItems: sortItems
                                 ,addItem: addItem
                                 ,updateItem: updateItem
                                 ,SubAction: SubAction
                                 ,Add: Add
                                 ,update: update
                                 ,view: view};
};